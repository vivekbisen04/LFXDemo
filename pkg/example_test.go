package pkg

import (
	"testing"
	"reflect"
)

func TestNewCalculator(t *testing.T) {
	// Test that NewCalculator returns a pointer to a Calculator struct with an empty history.
	calc := NewCalculator()
	if calc == nil {
		t.Error("NewCalculator returned nil")
	}
	if len(calc.history) != 0 {
		t.Errorf("NewCalculator history is not empty: %v", calc.history)
	}
}

func TestAdd(t *testing.T) {
	calc := NewCalculator()

	// Test with positive numbers
	result := calc.Add(2, 3)
	if result != 5 {
		t.Errorf("Add(2, 3) = %d; want 5", result)
	}
	if len(calc.history) !=1 || calc.history[0] != "2 + 3 = 5" {
		t.Errorf("Add history incorrect: %v", calc.history)
	}

	// Test with negative numbers
	result = calc.Add(-2, -3)
	if result != -5 {
		t.Errorf("Add(-2, -3) = %d; want -5", result)
	}
	if len(calc.history) != 2 || calc.history[1] != "-2 + -3 = -5" {
		t.Errorf("Add history incorrect: %v", calc.history)
	}

	// Test with zero
	result = calc.Add(5,0)
	if result != 5 {
		t.Errorf("Add(5, 0) = %d; want 5", result)
	}
	if len(calc.history) != 3 || calc.history[2] != "5 + 0 = 5" {
		t.Errorf("Add history incorrect: %v", calc.history)
	}

	// Test with large numbers
	result = calc.Add(100000, 200000)
	if result != 300000 {
		t.Errorf("Add(100000, 200000) = %d; want 300000", result)
	}
}

func TestDivide(t *testing.T) {
	calc := NewCalculator()

	// Test with positive numbers
	result, err := calc.Divide(10, 2)
	if err != nil {
		t.Errorf("Divide(10, 2) returned error: %v", err)
	}
	if result != 5 {
		t.Errorf("Divide(10, 2) = %d; want 5", result)
	}
	if len(calc.history) != 1 || calc.history[0] != "10 / 2 = 5" {
		t.Errorf("Divide history incorrect: %v", calc.history)
	}


	// Test division by zero
	_, err = calc.Divide(10, 0)
	if err == nil {
		t.Error("Divide(10, 0) did not return an error")
	}
	if len(calc.history) != 1 {
		t.Errorf("Divide history incorrect: %v", calc.history)
	}

	// Test with negative numbers
	result, err = calc.Divide(-10, 2)
	if err != nil {
		t.Errorf("Divide(-10, 2) returned error: %v", err)
	}
	if result != -5 {
		t.Errorf("Divide(-10, 2) = %d; want -5", result)
	}
	if len(calc.history) != 2 || calc.history[1] != "-10 / 2 = -5" {
		t.Errorf("Divide history incorrect: %v", calc.history)
	}
}

func TestGetHistory(t *testing.T) {
	calc := NewCalculator()
	calc.Add(1,2)
	calc.Divide(4,2)
	// Test that GetHistory returns the correct history
	expectedHistory := []string{"1 + 2 = 3", "4 / 2 = 2"}
	if !reflect.DeepEqual(calc.GetHistory(), expectedHistory) {
		t.Errorf("GetHistory() = %v; want %v", calc.GetHistory(), expectedHistory)
	}

	//Test empty history
	calc2 := NewCalculator()
	if !reflect.DeepEqual(calc2.GetHistory(), []string{}) {
		t.Errorf("GetHistory() = %v; want []", calc2.GetHistory())
	}
}

func TestClear(t *testing.T) {
	calc := NewCalculator()
	calc.Add(1, 1)
	calc.Clear()
	// Test that Clear resets the history
	if len(calc.history) != 0 {
		t.Errorf("Clear() did not reset the history: %v", calc.history)
	}
}